using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Authorization;
using Azure.ResourceManager.Authorization.Models;
using Azure.ResourceManager.Resources;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System.Text.Json;

namespace CosmosToSqlAssessment.Services
{
    /// <summary>
    /// Service for checking Azure permissions and managing custom roles for Cosmos DB access
    /// Implements Azure best practices for least-privilege access
    /// </summary>
    public class AzurePermissionService
    {
        private readonly IConfiguration _configuration;
        private readonly ILogger<AzurePermissionService> _logger;
        private readonly ArmClient _armClient;

        public AzurePermissionService(IConfiguration configuration, ILogger<AzurePermissionService> logger)
        {
            _configuration = configuration;
            _logger = logger;

            var credential = new DefaultAzureCredential(new DefaultAzureCredentialOptions
            {
                ExcludeEnvironmentCredential = false,
                ExcludeWorkloadIdentityCredential = false,
                ExcludeManagedIdentityCredential = false,
                ExcludeInteractiveBrowserCredential = false,
                ExcludeAzureCliCredential = false,
                ExcludeAzurePowerShellCredential = false,
                ExcludeAzureDeveloperCliCredential = false
            });

            _armClient = new ArmClient(credential);
        }

        /// <summary>
        /// Checks if the current user has the required permissions for Cosmos DB metrics access
        /// </summary>
        public async Task<PermissionCheckResult> CheckCosmosDbPermissionsAsync(string cosmosEndpoint, CancellationToken cancellationToken = default)
        {
            var result = new PermissionCheckResult();
            
            try
            {
                // Parse Cosmos endpoint to get resource information
                var resourceInfo = ParseCosmosEndpoint(cosmosEndpoint);
                if (resourceInfo == null)
                {
                    result.HasRequiredPermissions = false;
                    result.ErrorMessage = "Invalid Cosmos DB endpoint format";
                    return result;
                }

                // Get the Cosmos DB resource
                var subscription = await _armClient.GetDefaultSubscriptionAsync(cancellationToken);
                var resourceGroup = await subscription.GetResourceGroupAsync(resourceInfo.ResourceGroupName, cancellationToken);
                var cosmosResourceId = $"/subscriptions/{subscription.Data.SubscriptionId}/resourceGroups/{resourceInfo.ResourceGroupName}/providers/Microsoft.DocumentDB/databaseAccounts/{resourceInfo.AccountName}";
                
                result.ResourceId = cosmosResourceId;
                result.SubscriptionId = subscription.Data.SubscriptionId;
                result.ResourceGroupName = resourceInfo.ResourceGroupName;
                result.CosmosAccountName = resourceInfo.AccountName;

                // Check required permissions
                var requiredActions = GetRequiredActions();
                var permissionResults = CheckPermissions(cosmosResourceId, requiredActions);
                
                result.HasRequiredPermissions = permissionResults.All(p => p.HasPermission);
                result.MissingPermissions = permissionResults.Where(p => !p.HasPermission).Select(p => p.Action).ToList();
                result.PermissionDetails = permissionResults;

                _logger.LogInformation("Permission check completed. Required permissions: {HasPermissions}", result.HasRequiredPermissions);
                
                return result;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error checking Azure permissions");
                result.HasRequiredPermissions = false;
                result.ErrorMessage = ex.Message;
                return result;
            }
        }

        /// <summary>
        /// Generates scripts for creating and assigning the custom role
        /// </summary>
        public string GenerateRoleCreationScript(PermissionCheckResult permissionResult)
        {
            var roleName = "Cosmos-DB-Metrics-Reader";
            var roleDefinition = CreateRoleDefinition(roleName, permissionResult.ResourceId!);
            
            var script = $@"#!/bin/bash
# Cosmos DB Metrics Reader Role Creation Script
# Generated by Cosmos DB to SQL Migration Assessment Tool
# This script creates a custom role with minimal permissions for Cosmos DB metrics access

echo ""Creating custom role for Cosmos DB metrics access...""

# Create temporary role definition file
cat > cosmos-metrics-role.json << 'EOF'
{JsonSerializer.Serialize(roleDefinition, new JsonSerializerOptions { WriteIndented = true })}
EOF

# Create the custom role
echo ""Creating custom role definition...""
az role definition create --role-definition cosmos-metrics-role.json

if [ $? -eq 0 ]; then
    echo ""‚úÖ Custom role '{roleName}' created successfully""
    
    # Get current user's object ID
    USER_OBJECT_ID=$(az ad signed-in-user show --query objectId -o tsv)
    
    if [ ! -z ""$USER_OBJECT_ID"" ]; then
        echo ""Assigning role to current user...""
        az role assignment create \
            --assignee ""$USER_OBJECT_ID"" \
            --role ""{roleName}"" \
            --scope ""{permissionResult.ResourceId}""
        
        if [ $? -eq 0 ]; then
            echo ""‚úÖ Role assigned successfully to current user""
            echo ""‚ö†Ô∏è  Note: Role assignments may take up to 5 minutes to take effect""
            echo ""üìã Role cleanup script generated: remove-cosmos-metrics-role.sh""
        else
            echo ""‚ùå Failed to assign role to user""
        fi
    else
        echo ""‚ùå Could not determine current user object ID""
        echo ""üí° Manually assign the role using:""
        echo ""   az role assignment create --assignee YOUR_USER_EMAIL --role '{roleName}' --scope '{permissionResult.ResourceId}'""
    fi
else
    echo ""‚ùå Failed to create custom role""
fi

# Clean up temporary file
rm -f cosmos-metrics-role.json
echo ""üèÅ Script completed""
";

            return script;
        }

        /// <summary>
        /// Generates a script for removing the custom role after analysis is complete
        /// </summary>
        public string GenerateRoleRemovalScript(PermissionCheckResult permissionResult)
        {
            var roleName = "Cosmos-DB-Metrics-Reader";
            
            var script = $@"#!/bin/bash
# Cosmos DB Metrics Reader Role Removal Script
# Generated by Cosmos DB to SQL Migration Assessment Tool
# This script removes the custom role and assignments after analysis completion

echo ""Removing Cosmos DB metrics reader role and assignments...""

# Get current user's object ID
USER_OBJECT_ID=$(az ad signed-in-user show --query objectId -o tsv)

if [ ! -z ""$USER_OBJECT_ID"" ]; then
    echo ""Removing role assignment from current user...""
    az role assignment delete \
        --assignee ""$USER_OBJECT_ID"" \
        --role ""{roleName}"" \
        --scope ""{permissionResult.ResourceId}""
    
    if [ $? -eq 0 ]; then
        echo ""‚úÖ Role assignment removed successfully""
    else
        echo ""‚ö†Ô∏è  Role assignment may not exist or already removed""
    fi
fi

echo ""Removing custom role definition...""
az role definition delete --name ""{roleName}""

if [ $? -eq 0 ]; then
    echo ""‚úÖ Custom role '{roleName}' removed successfully""
    echo ""üßπ Cleanup completed""
else
    echo ""‚ùå Failed to remove custom role or role may not exist""
fi

echo ""üèÅ Cleanup script completed""
";

            return script;
        }

        /// <summary>
        /// Prompts user for action when permissions are missing
        /// </summary>
        public PermissionAction PromptUserForPermissionAction(PermissionCheckResult permissionResult)
        {
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("‚ö†Ô∏è  MISSING AZURE PERMISSIONS DETECTED");
            Console.ResetColor();
            
            Console.WriteLine();
            Console.WriteLine($"The application requires specific permissions to access Cosmos DB metrics.");
            Console.WriteLine($"Missing permissions:");
            
            foreach (var permission in permissionResult.MissingPermissions)
            {
                Console.WriteLine($"  ‚Ä¢ {permission}");
            }
            
            Console.WriteLine();
            Console.WriteLine("Available options:");
            Console.WriteLine("1. üõ†Ô∏è  Generate scripts to create custom role and assign to current user");
            Console.WriteLine("2. ‚ñ∂Ô∏è  Continue without enhanced metrics (basic analysis only)");
            Console.WriteLine("3. üõë Generate scripts for administrator and stop application");
            Console.WriteLine();
            
            while (true)
            {
                Console.Write("Select option (1-3): ");
                var input = Console.ReadLine();
                
                switch (input?.Trim())
                {
                    case "1":
                        return PermissionAction.CreateRole;
                    case "2":
                        return PermissionAction.ContinueWithoutPermissions;
                    case "3":
                        return PermissionAction.StopApplication;
                    default:
                        Console.WriteLine("Invalid option. Please enter 1, 2, or 3.");
                        break;
                }
            }
        }

        /// <summary>
        /// Creates and saves the role creation and removal scripts
        /// </summary>
        public async Task<bool> CreateRoleManagementScriptsAsync(PermissionCheckResult permissionResult, string outputDirectory)
        {
            try
            {
                var createScript = GenerateRoleCreationScript(permissionResult);
                var removeScript = GenerateRoleRemovalScript(permissionResult);
                
                var createScriptPath = Path.Combine(outputDirectory, "create-cosmos-metrics-role.sh");
                var removeScriptPath = Path.Combine(outputDirectory, "remove-cosmos-metrics-role.sh");
                
                await File.WriteAllTextAsync(createScriptPath, createScript);
                await File.WriteAllTextAsync(removeScriptPath, removeScript);
                
                // Also create PowerShell versions for Windows
                var createScriptPs1 = createScript.Replace("#!/bin/bash", "# PowerShell version")
                    .Replace("cat > cosmos-metrics-role.json << 'EOF'", "@'\n")
                    .Replace("EOF", "'@ | Out-File -FilePath cosmos-metrics-role.json -Encoding UTF8")
                    .Replace("[ $? -eq 0 ]", "$LASTEXITCODE -eq 0")
                    .Replace("[ ! -z \"$USER_OBJECT_ID\" ]", "![string]::IsNullOrEmpty($USER_OBJECT_ID)")
                    .Replace("USER_OBJECT_ID=$(az ad signed-in-user show --query objectId -o tsv)", "$USER_OBJECT_ID = az ad signed-in-user show --query objectId -o tsv");
                
                var removeScriptPs1 = removeScript.Replace("#!/bin/bash", "# PowerShell version")
                    .Replace("[ $? -eq 0 ]", "$LASTEXITCODE -eq 0")
                    .Replace("[ ! -z \"$USER_OBJECT_ID\" ]", "![string]::IsNullOrEmpty($USER_OBJECT_ID)")
                    .Replace("USER_OBJECT_ID=$(az ad signed-in-user show --query objectId -o tsv)", "$USER_OBJECT_ID = az ad signed-in-user show --query objectId -o tsv");
                
                await File.WriteAllTextAsync(Path.Combine(outputDirectory, "create-cosmos-metrics-role.ps1"), createScriptPs1);
                await File.WriteAllTextAsync(Path.Combine(outputDirectory, "remove-cosmos-metrics-role.ps1"), removeScriptPs1);
                
                Console.WriteLine();
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("‚úÖ Role management scripts created successfully!");
                Console.ResetColor();
                Console.WriteLine();
                Console.WriteLine($"üìÇ Scripts location: {outputDirectory}");
                Console.WriteLine("üìÑ Files created:");
                Console.WriteLine($"   ‚Ä¢ create-cosmos-metrics-role.sh (Linux/macOS)");
                Console.WriteLine($"   ‚Ä¢ create-cosmos-metrics-role.ps1 (Windows PowerShell)");
                Console.WriteLine($"   ‚Ä¢ remove-cosmos-metrics-role.sh (Linux/macOS)");
                Console.WriteLine($"   ‚Ä¢ remove-cosmos-metrics-role.ps1 (Windows PowerShell)");
                Console.WriteLine();
                Console.WriteLine("üöÄ Next steps:");
                Console.WriteLine("1. Run the create script with an Azure administrator account");
                Console.WriteLine("2. Wait 5 minutes for role assignments to take effect");
                Console.WriteLine("3. Re-run this application");
                Console.WriteLine("4. Use the remove script after analysis completion (optional)");
                
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating role management scripts");
                Console.WriteLine($"‚ùå Error creating scripts: {ex.Message}");
                return false;
            }
        }

        private CosmosResourceInfo? ParseCosmosEndpoint(string endpoint)
        {
            try
            {
                var uri = new Uri(endpoint);
                var hostParts = uri.Host.Split('.');
                
                if (hostParts.Length < 2 || !hostParts[1].Equals("documents", StringComparison.OrdinalIgnoreCase))
                {
                    return null;
                }
                
                var accountName = hostParts[0];
                
                // For simplicity, we'll ask user for resource group name
                // In a production app, you might want to discover this via ARM APIs
                Console.Write($"Enter the resource group name for Cosmos account '{accountName}': ");
                var resourceGroupName = Console.ReadLine();
                
                if (string.IsNullOrWhiteSpace(resourceGroupName))
                {
                    return null;
                }
                
                return new CosmosResourceInfo
                {
                    AccountName = accountName,
                    ResourceGroupName = resourceGroupName
                };
            }
            catch
            {
                return null;
            }
        }

        private List<string> GetRequiredActions()
        {
            return new List<string>
            {
                "Microsoft.DocumentDB/databaseAccounts/read",
                "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/read",
                "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/read",
                "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/throughputSettings/read",
                "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/throughputSettings/read"
            };
        }

        private List<PermissionDetail> CheckPermissions(string resourceId, List<string> actions)
        {
            var results = new List<PermissionDetail>();
            
            try
            {
                // Note: Azure ARM doesn't provide a direct "check permissions" API
                // This is a simplified check - in reality, you'd need to enumerate role assignments
                // and check if any of them provide the required actions
                
                foreach (var action in actions)
                {
                    // For now, we'll assume we don't have permissions and let the user create the role
                    // In a full implementation, you would check actual role assignments
                    results.Add(new PermissionDetail
                    {
                        Action = action,
                        HasPermission = false,
                        ResourceId = resourceId
                    });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error checking specific permissions");
                
                // If we can't check, assume we don't have permissions
                foreach (var action in actions)
                {
                    results.Add(new PermissionDetail
                    {
                        Action = action,
                        HasPermission = false,
                        ResourceId = resourceId
                    });
                }
            }
            
            return results;
        }

        private object CreateRoleDefinition(string roleName, string scope)
        {
            return new
            {
                Name = roleName,
                Description = "Custom role for reading Cosmos DB metrics and performance data directly from Cosmos DB APIs. Created by Cosmos DB to SQL Migration Assessment Tool.",
                Actions = new[]
                {
                    "Microsoft.DocumentDB/databaseAccounts/read",
                    "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/read",
                    "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/read",
                    "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/throughputSettings/read",
                    "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/throughputSettings/read"
                },
                NotActions = new string[0],
                DataActions = new[]
                {
                    "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/read"
                },
                NotDataActions = new string[0],
                AssignableScopes = new[] { scope }
            };
        }
    }

    public class PermissionCheckResult
    {
        public bool HasRequiredPermissions { get; set; }
        public List<string> MissingPermissions { get; set; } = new();
        public List<PermissionDetail> PermissionDetails { get; set; } = new();
        public string? ErrorMessage { get; set; }
        public string? ResourceId { get; set; }
        public string? SubscriptionId { get; set; }
        public string? ResourceGroupName { get; set; }
        public string? CosmosAccountName { get; set; }
    }

    public class PermissionDetail
    {
        public string Action { get; set; } = string.Empty;
        public bool HasPermission { get; set; }
        public string ResourceId { get; set; } = string.Empty;
    }

    public class CosmosResourceInfo
    {
        public string AccountName { get; set; } = string.Empty;
        public string ResourceGroupName { get; set; } = string.Empty;
    }

    public enum PermissionAction
    {
        CreateRole,
        ContinueWithoutPermissions,
        StopApplication
    }
}
